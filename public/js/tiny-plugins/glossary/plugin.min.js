(function() {
    tinymce.PluginManager.add('glossary', function(editor, url) {
      // ——— 1. Your test glossary: 10 InfoSec terms ———
      const glossary = [
        {
          term: 'Authentication',
          slug: 'authentication',
          definitions: [
            { id: 'password', text: 'Password-based authentication' },
            { id: 'mfa',      text: 'Multi-factor authentication' },
            { id: 'sso',      text: 'Single Sign-On (SSO)' }
          ]
        },
        {
          term: 'Authorization',
          slug: 'authorization',
          definitions: [
            { id: 'rbac', text: 'Role-Based Access Control (RBAC)' },
            { id: 'abac', text: 'Attribute-Based Access Control (ABAC)' }
          ]
        },
        {
          term: 'Encryption',
          slug: 'encryption',
          definitions: [
            { id: 'symmetric',  text: 'Symmetric encryption' },
            { id: 'asymmetric', text: 'Asymmetric encryption' }
          ]
        },
        {
          term: 'Firewall',
          slug: 'firewall',
          definitions: [
            { id: 'network-fw', text: 'Network-level firewall' },
            { id: 'host-fw',    text: 'Host-based firewall' }
          ]
        },
        {
          term: 'Vulnerability',
          slug: 'vulnerability',
          definitions: [
            { id: 'zero-day', text: 'Zero-day vulnerability' },
            { id: 'known',    text: 'Known vulnerability' }
          ]
        },
        {
          term: 'Malware',
          slug: 'malware',
          definitions: [
            { id: 'virus', text: 'Computer virus' },
            { id: 'worm',  text: 'Computer worm' }
          ]
        },
        {
          term: 'Phishing',
          slug: 'phishing',
          definitions: [
            { id: 'spear',   text: 'Spear phishing' },
            { id: 'whaling', text: 'Whaling' }
          ]
        },
        {
          term: 'SOC',
          slug: 'soc',
          definitions: [
            { id: 'monitoring', text: '24/7 security monitoring' }
          ]
        },
        {
          term: 'SIEM',
          slug: 'siem',
          definitions: [
            { id: 'log-correlation', text: 'Log correlation and analysis' }
          ]
        },
        {
          term: 'Incident Response',
          slug: 'incident-response',
          definitions: [
            { id: 'detection',   text: 'Detection' },
            { id: 'containment', text: 'Containment' },
            { id: 'eradication', text: 'Eradication' }
          ]
        }
      ];

      // ——— 2. Expand caret/partial selection to entire word ———
      function expandSelectionToWord() {
        const sel = editor.selection;
        const rng = sel.getRng();
        const nc  = rng.startContainer;
        const off = rng.startOffset;
        if (nc.nodeType !== 3) return;
        const txt = nc.textContent;
        let s = off, e = off;
        while (s > 0 && /\w/.test(txt[s - 1])) s--;
        while (e < txt.length && /\w/.test(txt[e])) e++;
        if (e > s) {
          const r2 = document.createRange();
          r2.setStart(nc, s);
          r2.setEnd(nc, e);
          sel.setRng(r2);
        }
      }

      // ——— 3. Ensure (or insert) the Appendix A container ———
      function ensureGlossaryAppendix() {
        const body    = editor.getBody();
        let heading   = body.querySelector('h2[data-glossary-appendix]');
        let entriesEl = body.querySelector('div[data-glossary-entries]');

        if (!heading || !entriesEl) {
          // blank paragraph
          const p = editor.dom.create('p', {}, '&nbsp;');
          editor.dom.add(body, p);
          // heading
          heading = editor.dom.create(
            'h2',
            { 'data-glossary-appendix': 'true' },
            'Appendix A – Glossary'
          );
          editor.dom.add(body, heading);
          // entries container
          entriesEl = editor.dom.create(
            'div',
            { 'data-glossary-entries': 'true' }
          );
          editor.dom.add(body, entriesEl);
        }

        return entriesEl;
      }

      // ——— 4. Add or update one line in Appendix A ———
      function updateGlossaryEntry(entry, defTexts) {
        const entriesEl = ensureGlossaryAppendix();
        let row = entriesEl.querySelector(`div[data-term="${entry.slug}"]`);
        const html = `<strong>${entry.term}:</strong> ${editor.dom.encode(defTexts.join('; '))}`;

        if (row) {
          row.innerHTML = html;
        } else {
          row = editor.dom.create('div', { 'data-term': entry.slug }, html);
          editor.dom.add(entriesEl, row);
        }
      }

      // ——— 5. Open the Add-Glossary dialog ———
      function openGlossaryDialog(selectedText, prior = { search: '', term: '', definitions: [] }) {
        function buildDialog(data) {
          // Filter terms only when user typed text
          const filtered = data.search
            ? glossary.filter(item =>
                item.term.toLowerCase().includes(data.search.toLowerCase())
              )
            : [];

          const termItems = filtered.map(item => ({
            text: item.term,
            value: item.slug
          }));

          const chosen = glossary.find(item => item.slug === data.term);
          const defs   = chosen ? chosen.definitions : [];
          const defItems = defs.map(d => ({
            text: d.text,
            value: d.id
          }));

          return {
            title: 'Add Glossary Reference',
            size: 'normal',
            body: {
              type: 'panel',
              items: [
                {
                  type:        'input',
                  name:        'search',
                  label:       'Search term…',
                  placeholder: 'Type to search',
                  value:       data.search
                },
                {
                  type:  'listbox',
                  name:  'term',
                  label: 'Term',
                  items: termItems,
                  value: data.term
                },
                {
                  type:     'listbox',
                  name:     'definitions',
                  label:    'Definitions',
                  multiple: true,
                  items:    defItems,
                  value:    data.definitions
                }
              ]
            },
            buttons: [
              { type: 'cancel', text: 'Cancel' },
              { type: 'submit', text: 'Link', primary: true }
            ],
            initialData: {
              search:      data.search,
              term:        data.term,
              definitions: data.definitions
            },
            onChange: (api, details) => {
              const d = api.getData();
              if (details.name === 'search') {
                // new search → clear term & defs
                api.redial(buildDialog({ search: d.search, term: '', definitions: [] }));
              }
              if (details.name === 'term') {
                // term picked → auto-select all its definitions
                const picked = glossary.find(i => i.slug === d.term);
                const allDefs = picked
                  ? picked.definitions.map(def => def.id)
                  : [];
                api.redial(buildDialog({ search: d.search, term: d.term, definitions: allDefs }));
              }
            },
            onSubmit: (api) => {
              const d = api.getData();
              const pickedTerm = glossary.find(i => i.slug === d.term);
              if (!pickedTerm) {
                editor.notificationManager.open({
                  text: 'Please select a term before linking.'
                });
                return;
              }
              // only user-checked definitions
              const pickedDefs = pickedTerm.definitions
                .filter(def => d.definitions.includes(def.id))
                .map(def => def.text);

              // 1) wrap the selected text in an <a>
              const title = pickedDefs.join('; ');
              const href  = `/glossary#${pickedTerm.slug}`;
              const html  = `<a href="${href}"
                                class="glossary-term"
                                title="${editor.dom.encode(title)}"
                              >${editor.dom.encode(selectedText)}</a>`;
              editor.execCommand('mceReplaceContent', false, html);

              // 2) update the Appendix A section
              updateGlossaryEntry(pickedTerm, pickedDefs);

              api.close();
            }
          };
        }

        editor.windowManager.open(buildDialog(prior));
      }

      // ——— 6. Add the toolbar button ———
      editor.ui.registry.addButton('glossary', {
        text: '+Glossary',
        tooltip: 'Link to glossary term',
        onAction: () => {
          expandSelectionToWord();
          const sel = editor.selection.getContent({ format: 'text' }).trim();
          if (!sel) {
            return editor.notificationManager.open({
              text: 'Please select a word first.'
            });
          }
          openGlossaryDialog(sel);
        }
      });

      // ——— 7. Plugin metadata ———
      return {
        getMetadata: () => ({
          name: 'Glossary Plugin',
          url:  'https://example.com/glossary-plugin'
        })
      };
    });
  })();

// tinymce/plugins/glossary/plugin.min.js
(function() {
    console.log('Glossary plugin loaded');

    tinymce.PluginManager.add('glossary', function(editor, url) {
      console.log('Glossary plugin init – URL:', url);


      // General glossary button using custom icon
      editor.ui.registry.addButton('glossary', {
        text: '+Glossary',
        tooltip: 'Link to glossary term',
        onAction: function() {
          const selText = editor.selection.getContent({ format: 'text' });
          if (!selText) {
            return editor.notificationManager.open({ text: 'Select text to link to glossary.' });
          }
          // Prompt term selection
          const choices = glossary.map(t => t.term).join(', ');
          const chosen = prompt(`Link "${selText}" to one of: ${choices}`);
          const entry = glossary.find(t => t.term.toLowerCase() === (chosen || '').toLowerCase());
          if (entry) {
            editor.execCommand('mceReplaceContent', false,
              `<a href="/glossary#${entry.slug}" class="glossary-term" title="${entry.definition.replace(/"/g,'&quot;')}">${selText}</a>`
            );
          } else {
            editor.notificationManager.open({ text: 'Term not found in glossary.' });
          }
        }
      });

      // Glossary terms with associated icon slugs and definitions
      const glossary = [
        { term: 'CONFIDENTIAL', slug: 'confidential', definition: 'Information that must be kept secret.' },
        { term: 'RISK',         slug: 'risk',         definition: 'Potential for loss or harm.' },
        { term: 'COMPLIANCE',   slug: 'compliance',   definition: 'Adherence to laws and policies.' }
        // Add more terms and corresponding SVG filenames here
      ];

      // 1. Preload & register SVG icons for each term
      glossary.forEach(item => {
        const svgPath = `${url}/${item.slug}.svg`;
        fetch(svgPath)
          .then(res => res.text())
          .then(svg => {
            editor.ui.registry.addIcon(item.slug, svg);
            console.log(`Registered icon '${item.slug}' from ${svgPath}`);
          })
          .catch(err => console.error(`Failed to load icon ${svgPath}:`, err));
      });

      // 2. Register a button for each glossary term using its icon
      glossary.forEach(item => {
        editor.ui.registry.addButton(item.slug, {
          tooltip: `Insert ${item.term}`,
          icon: item.slug,
          onAction: () => {
            const html = `<a href="/glossary#${item.slug}" class="glossary-term" title="${item.definition.replace(/"/g,'&quot;')}">${item.term}</a>`;
            editor.insertContent(html);
          }
        });
      });

      // 3. Auto‐link initial content to glossary
      editor.on('SetContent', function(e) {
        if (e.initial) {
          const content = editor.getContent({ format: 'html' });
          const linked = glossary.reduce((html, item) => {
            const re = new RegExp(`(?![^<]*>)(\\b${item.term}\\b)(?![^<]*>)`, 'gi');
            return html.replace(re, match =>
              `<a href="/glossary#${item.slug}" class="glossary-term" title="${item.definition.replace(/"/g,'&quot;')}">${match}</a>`
            );
          }, content);
          if (linked !== content) {
            editor.setContent(linked, { format: 'html', no_events: true });
          }
        }
      });

      // Return metadata for TinyMCE
      return {
        getMetadata: function() {
          return {
            name: 'Glossary Plugin',
            url: 'https://example.com/glossary-plugin'
          };
        }
      };
    });
  })();
